# JOS
An operating system from scratch

# Directory
boot -> bootloader, from real mode -> protected mode -> long mode (heavily borrowed from osdev.org)
kernel -> kernel code, style like xv6 (MIT 6.828)

# Run
make qemu:
    run in qemu, with display

make test:
    without display, uart output redirected to stdout

make img:
    build os.img from bootloader and kernel code

# Kernel code size tip

## image size
In real mode, we load our kernel code from disk. The disk size is determined in
Makefile, when we use `dd if=/dev/zero of=os.img bs=512 count=X`. The disk size
is (X/2) KiB

## kernel code size
In boot.S's real mode sector, we use a loop to load kernel(and 2 sector of 
bootloader) from disk, 64KiB each time. The counter is in bx. The total size
of bootloader and kernel **COULD** be (1 + bx * (64KiB)).
e.g. bx=4, allows us to have 257 KiB of code (257 - 1.5) KiB of kernel code.

# Roadmap
[x] bootloader
[x] jump to C kernel
[x] bigger kernel
[x] VGA and uart
[] setup idt
   - [] keyboard interrupt
   - [] timer interrupt
[] change preset pagetable in kernel
   - [] kernel pagetable in C
[] kernel memory allocation
[] scheduling
[] user process
[] trap

